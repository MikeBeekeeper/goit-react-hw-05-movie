{"version":3,"file":"static/js/879.26839ce6.chunk.js","mappings":"sMAgCA,UA3Ba,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAKR,OAHAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAUH,GAASI,MAAK,SAAAC,GAAG,OAAIN,EAAQM,EAAZ,GAC5B,GAAE,CAACL,KAEF,gCACmB,IAAhBF,EAAKQ,SACJ,uEAEDR,EAAKQ,OAAS,IACb,wBACGR,EAAKS,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAIC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,2BACE,gBAAKC,KAAKC,EAAAA,EAAAA,GAASH,GAAeI,IAAKN,EAAMO,MAAM,UACnD,uBAAIP,KACJ,uCAAeG,OAHRF,EADD,QAWnB,C,8LC5BKO,EAAW,gCACXC,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,6GAERD,EAAAA,EAAAA,IAAA,UAClBF,EADkB,uCACqBC,IAHb,cAEzBG,EAFyB,yBAKxBA,EAASC,KAAKC,SALU,gCAO/BC,QAAQC,IAAR,MAP+B,yDAAH,qDAWnBC,EAAiB,mCAAG,WAAMhB,GAAN,gGAENS,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAP,EADA,oBACcQ,IAHR,cAEvBG,EAFuB,yBAKtBA,EAASC,MALa,gCAO7BE,QAAQC,IAAR,MAP6B,yDAAH,sDAWjBrB,EAAS,mCAAG,WAAMM,GAAN,gGAEES,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAP,EADA,4BACsBQ,IAHxB,cAEfG,EAFe,yBAKdA,EAASC,KAAKvB,MALA,gCAOrByB,QAAQC,IAAR,MAPqB,yDAAH,sDAWTE,EAAY,mCAAG,WAAMjB,GAAN,uFACHS,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAP,EADA,4BACsBQ,IAFnB,cACpBG,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,sDAOZK,EAAkB,mCAAG,WAAMC,GAAN,uFACTV,EAAAA,EAAAA,IAAA,gBAA2B,CAChDW,OAAQ,CACNC,QAASb,EACTW,MAAAA,KAJ4B,cAC1BR,EAD0B,yBAOzBA,EAASC,KAAKC,SAPW,2CAAH,qD,qDC9CxB,IAAMT,EAAW,SAAAkB,GACpB,GAAIA,EAAO,MAAM,kCAAN,OAAyCA,EACrD,C","sources":["components/cast/Cast.js","helpers/Fetch.js","helpers/GetImage.js"],"sourcesContent":["import { fetchCast } from 'helpers/Fetch';\nimport { getImage } from 'helpers/GetImage';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchCast(movieId).then(res => setCast(res));\n  }, [movieId]);\n  return (\n    <>\n      {cast.length === 0 && (\n        <div>We don't have information about this film</div>\n      )}\n      {cast.length > 0 && (\n        <ul>\n          {cast.map(({ name, id, profile_path, character }) => (\n            <li key={id}>\n              <img src={getImage(profile_path)} alt={name} width=\"80px\" />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'e921f15ae860f6e4269e7dedfe9b8c39';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCast = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  });\n  return response.data.results;\n};\n","export const getImage = image => {\n    if (image) return `https://image.tmdb.org/t/p/w500${image}`;\n  };"],"names":["useState","cast","setCast","movieId","useParams","useEffect","fetchCast","then","res","length","map","name","id","profile_path","character","src","getImage","alt","width","BASE_URL","API_KEY","axios","fetchTrendingMovies","response","data","results","console","log","fetchMovieDetails","fetchReviews","fetchMoviesByQuery","query","params","api_key","image"],"sourceRoot":""}